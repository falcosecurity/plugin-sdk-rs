/* automatically generated by rust-bindgen 0.71.1 */

pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const PLUGIN_API_VERSION_MAJOR: u32 = 3;
pub const PLUGIN_API_VERSION_MINOR: u32 = 10;
pub const PLUGIN_API_VERSION_PATCH: u32 = 0;
pub const PLUGIN_MAX_ERRLEN: u32 = 1024;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
unsafe extern "C-unwind" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
unsafe extern "C-unwind" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C-unwind" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
unsafe extern "C-unwind" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C-unwind" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type ss_plugin_bool = u32;
pub const ss_plugin_field_type_FTYPE_UINT64: ss_plugin_field_type = 8;
pub const ss_plugin_field_type_FTYPE_STRING: ss_plugin_field_type = 9;
pub const ss_plugin_field_type_FTYPE_RELTIME: ss_plugin_field_type = 20;
pub const ss_plugin_field_type_FTYPE_ABSTIME: ss_plugin_field_type = 21;
pub const ss_plugin_field_type_FTYPE_BOOL: ss_plugin_field_type = 25;
pub const ss_plugin_field_type_FTYPE_IPADDR: ss_plugin_field_type = 40;
pub const ss_plugin_field_type_FTYPE_IPNET: ss_plugin_field_type = 41;
pub type ss_plugin_field_type = ::std::os::raw::c_uint;
pub const ss_plugin_rc_SS_PLUGIN_SUCCESS: ss_plugin_rc = 0;
pub const ss_plugin_rc_SS_PLUGIN_FAILURE: ss_plugin_rc = 1;
pub const ss_plugin_rc_SS_PLUGIN_TIMEOUT: ss_plugin_rc = -1;
pub const ss_plugin_rc_SS_PLUGIN_EOF: ss_plugin_rc = 2;
pub const ss_plugin_rc_SS_PLUGIN_NOT_SUPPORTED: ss_plugin_rc = 3;
pub type ss_plugin_rc = ::std::os::raw::c_int;
pub const ss_plugin_schema_type_SS_PLUGIN_SCHEMA_NONE: ss_plugin_schema_type = 0;
pub const ss_plugin_schema_type_SS_PLUGIN_SCHEMA_JSON: ss_plugin_schema_type = 1;
pub type ss_plugin_schema_type = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_event {
    pub ts: u64,
    pub tid: u64,
    pub len: u32,
    pub type_: u16,
    pub nparams: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_event"][::std::mem::size_of::<ss_plugin_event>() - 26usize];
    ["Alignment of ss_plugin_event"][::std::mem::align_of::<ss_plugin_event>() - 1usize];
    ["Offset of field: ss_plugin_event::ts"][::std::mem::offset_of!(ss_plugin_event, ts) - 0usize];
    ["Offset of field: ss_plugin_event::tid"]
        [::std::mem::offset_of!(ss_plugin_event, tid) - 8usize];
    ["Offset of field: ss_plugin_event::len"]
        [::std::mem::offset_of!(ss_plugin_event, len) - 16usize];
    ["Offset of field: ss_plugin_event::type_"]
        [::std::mem::offset_of!(ss_plugin_event, type_) - 20usize];
    ["Offset of field: ss_plugin_event::nparams"]
        [::std::mem::offset_of!(ss_plugin_event, nparams) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_event_input {
    pub evt: *const ss_plugin_event,
    pub evtnum: u64,
    pub evtsrc: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_event_input"][::std::mem::size_of::<ss_plugin_event_input>() - 24usize];
    ["Alignment of ss_plugin_event_input"]
        [::std::mem::align_of::<ss_plugin_event_input>() - 8usize];
    ["Offset of field: ss_plugin_event_input::evt"]
        [::std::mem::offset_of!(ss_plugin_event_input, evt) - 0usize];
    ["Offset of field: ss_plugin_event_input::evtnum"]
        [::std::mem::offset_of!(ss_plugin_event_input, evtnum) - 8usize];
    ["Offset of field: ss_plugin_event_input::evtsrc"]
        [::std::mem::offset_of!(ss_plugin_event_input, evtsrc) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_byte_buffer {
    pub len: u32,
    pub ptr: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_byte_buffer"][::std::mem::size_of::<ss_plugin_byte_buffer>() - 16usize];
    ["Alignment of ss_plugin_byte_buffer"]
        [::std::mem::align_of::<ss_plugin_byte_buffer>() - 8usize];
    ["Offset of field: ss_plugin_byte_buffer::len"]
        [::std::mem::offset_of!(ss_plugin_byte_buffer, len) - 0usize];
    ["Offset of field: ss_plugin_byte_buffer::ptr"]
        [::std::mem::offset_of!(ss_plugin_byte_buffer, ptr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ss_plugin_extract_field {
    pub res: ss_plugin_extract_field__bindgen_ty_1,
    pub res_len: u64,
    pub field_id: u32,
    pub field: *const ::std::os::raw::c_char,
    pub arg_key: *const ::std::os::raw::c_char,
    pub arg_index: u64,
    pub arg_present: ss_plugin_bool,
    pub ftype: u32,
    pub flist: ss_plugin_bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ss_plugin_extract_field__bindgen_ty_1 {
    pub str_: *mut *const ::std::os::raw::c_char,
    pub u64_: *mut u64,
    pub u32_: *mut u32,
    pub boolean: *mut ss_plugin_bool,
    pub buf: *mut ss_plugin_byte_buffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_extract_field__bindgen_ty_1"]
        [::std::mem::size_of::<ss_plugin_extract_field__bindgen_ty_1>() - 8usize];
    ["Alignment of ss_plugin_extract_field__bindgen_ty_1"]
        [::std::mem::align_of::<ss_plugin_extract_field__bindgen_ty_1>() - 8usize];
    ["Offset of field: ss_plugin_extract_field__bindgen_ty_1::str_"]
        [::std::mem::offset_of!(ss_plugin_extract_field__bindgen_ty_1, str_) - 0usize];
    ["Offset of field: ss_plugin_extract_field__bindgen_ty_1::u64_"]
        [::std::mem::offset_of!(ss_plugin_extract_field__bindgen_ty_1, u64_) - 0usize];
    ["Offset of field: ss_plugin_extract_field__bindgen_ty_1::u32_"]
        [::std::mem::offset_of!(ss_plugin_extract_field__bindgen_ty_1, u32_) - 0usize];
    ["Offset of field: ss_plugin_extract_field__bindgen_ty_1::boolean"]
        [::std::mem::offset_of!(ss_plugin_extract_field__bindgen_ty_1, boolean) - 0usize];
    ["Offset of field: ss_plugin_extract_field__bindgen_ty_1::buf"]
        [::std::mem::offset_of!(ss_plugin_extract_field__bindgen_ty_1, buf) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_extract_field"][::std::mem::size_of::<ss_plugin_extract_field>() - 64usize];
    ["Alignment of ss_plugin_extract_field"]
        [::std::mem::align_of::<ss_plugin_extract_field>() - 8usize];
    ["Offset of field: ss_plugin_extract_field::res"]
        [::std::mem::offset_of!(ss_plugin_extract_field, res) - 0usize];
    ["Offset of field: ss_plugin_extract_field::res_len"]
        [::std::mem::offset_of!(ss_plugin_extract_field, res_len) - 8usize];
    ["Offset of field: ss_plugin_extract_field::field_id"]
        [::std::mem::offset_of!(ss_plugin_extract_field, field_id) - 16usize];
    ["Offset of field: ss_plugin_extract_field::field"]
        [::std::mem::offset_of!(ss_plugin_extract_field, field) - 24usize];
    ["Offset of field: ss_plugin_extract_field::arg_key"]
        [::std::mem::offset_of!(ss_plugin_extract_field, arg_key) - 32usize];
    ["Offset of field: ss_plugin_extract_field::arg_index"]
        [::std::mem::offset_of!(ss_plugin_extract_field, arg_index) - 40usize];
    ["Offset of field: ss_plugin_extract_field::arg_present"]
        [::std::mem::offset_of!(ss_plugin_extract_field, arg_present) - 48usize];
    ["Offset of field: ss_plugin_extract_field::ftype"]
        [::std::mem::offset_of!(ss_plugin_extract_field, ftype) - 52usize];
    ["Offset of field: ss_plugin_extract_field::flist"]
        [::std::mem::offset_of!(ss_plugin_extract_field, flist) - 56usize];
};
#[repr(transparent)]
#[derive(Debug)]
pub struct ss_plugin_table_t(pub ::std::os::raw::c_void);
#[repr(transparent)]
#[derive(Debug)]
pub struct ss_plugin_table_entry_t(pub ::std::os::raw::c_void);
#[repr(transparent)]
#[derive(Debug)]
pub struct ss_plugin_table_field_t(pub ::std::os::raw::c_void);
pub const ss_plugin_state_type_SS_PLUGIN_ST_INT8: ss_plugin_state_type = 1;
pub const ss_plugin_state_type_SS_PLUGIN_ST_INT16: ss_plugin_state_type = 2;
pub const ss_plugin_state_type_SS_PLUGIN_ST_INT32: ss_plugin_state_type = 3;
pub const ss_plugin_state_type_SS_PLUGIN_ST_INT64: ss_plugin_state_type = 4;
pub const ss_plugin_state_type_SS_PLUGIN_ST_UINT8: ss_plugin_state_type = 5;
pub const ss_plugin_state_type_SS_PLUGIN_ST_UINT16: ss_plugin_state_type = 6;
pub const ss_plugin_state_type_SS_PLUGIN_ST_UINT32: ss_plugin_state_type = 7;
pub const ss_plugin_state_type_SS_PLUGIN_ST_UINT64: ss_plugin_state_type = 8;
pub const ss_plugin_state_type_SS_PLUGIN_ST_STRING: ss_plugin_state_type = 9;
pub const ss_plugin_state_type_SS_PLUGIN_ST_TABLE: ss_plugin_state_type = 10;
pub const ss_plugin_state_type_SS_PLUGIN_ST_BOOL: ss_plugin_state_type = 25;
pub type ss_plugin_state_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ss_plugin_state_data {
    pub s8: i8,
    pub s16: i16,
    pub s32: i32,
    pub s64: i64,
    pub u8_: u8,
    pub u16_: u16,
    pub u32_: u32,
    pub u64_: u64,
    pub str_: *const ::std::os::raw::c_char,
    pub b: ss_plugin_bool,
    pub table: *mut ss_plugin_table_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_state_data"][::std::mem::size_of::<ss_plugin_state_data>() - 8usize];
    ["Alignment of ss_plugin_state_data"][::std::mem::align_of::<ss_plugin_state_data>() - 8usize];
    ["Offset of field: ss_plugin_state_data::s8"]
        [::std::mem::offset_of!(ss_plugin_state_data, s8) - 0usize];
    ["Offset of field: ss_plugin_state_data::s16"]
        [::std::mem::offset_of!(ss_plugin_state_data, s16) - 0usize];
    ["Offset of field: ss_plugin_state_data::s32"]
        [::std::mem::offset_of!(ss_plugin_state_data, s32) - 0usize];
    ["Offset of field: ss_plugin_state_data::s64"]
        [::std::mem::offset_of!(ss_plugin_state_data, s64) - 0usize];
    ["Offset of field: ss_plugin_state_data::u8_"]
        [::std::mem::offset_of!(ss_plugin_state_data, u8_) - 0usize];
    ["Offset of field: ss_plugin_state_data::u16_"]
        [::std::mem::offset_of!(ss_plugin_state_data, u16_) - 0usize];
    ["Offset of field: ss_plugin_state_data::u32_"]
        [::std::mem::offset_of!(ss_plugin_state_data, u32_) - 0usize];
    ["Offset of field: ss_plugin_state_data::u64_"]
        [::std::mem::offset_of!(ss_plugin_state_data, u64_) - 0usize];
    ["Offset of field: ss_plugin_state_data::str_"]
        [::std::mem::offset_of!(ss_plugin_state_data, str_) - 0usize];
    ["Offset of field: ss_plugin_state_data::b"]
        [::std::mem::offset_of!(ss_plugin_state_data, b) - 0usize];
    ["Offset of field: ss_plugin_state_data::table"]
        [::std::mem::offset_of!(ss_plugin_state_data, table) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ss_plugin_table_info {
    pub name: *const ::std::os::raw::c_char,
    pub key_type: ss_plugin_state_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_table_info"][::std::mem::size_of::<ss_plugin_table_info>() - 16usize];
    ["Alignment of ss_plugin_table_info"][::std::mem::align_of::<ss_plugin_table_info>() - 8usize];
    ["Offset of field: ss_plugin_table_info::name"]
        [::std::mem::offset_of!(ss_plugin_table_info, name) - 0usize];
    ["Offset of field: ss_plugin_table_info::key_type"]
        [::std::mem::offset_of!(ss_plugin_table_info, key_type) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ss_plugin_table_fieldinfo {
    pub name: *const ::std::os::raw::c_char,
    pub field_type: ss_plugin_state_type,
    pub read_only: ss_plugin_bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_table_fieldinfo"]
        [::std::mem::size_of::<ss_plugin_table_fieldinfo>() - 16usize];
    ["Alignment of ss_plugin_table_fieldinfo"]
        [::std::mem::align_of::<ss_plugin_table_fieldinfo>() - 8usize];
    ["Offset of field: ss_plugin_table_fieldinfo::name"]
        [::std::mem::offset_of!(ss_plugin_table_fieldinfo, name) - 0usize];
    ["Offset of field: ss_plugin_table_fieldinfo::field_type"]
        [::std::mem::offset_of!(ss_plugin_table_fieldinfo, field_type) - 8usize];
    ["Offset of field: ss_plugin_table_fieldinfo::read_only"]
        [::std::mem::offset_of!(ss_plugin_table_fieldinfo, read_only) - 12usize];
};
#[repr(transparent)]
#[derive(Debug)]
pub struct ss_plugin_owner_t(pub ::std::os::raw::c_void);
#[repr(transparent)]
#[derive(Debug)]
pub struct ss_plugin_t(pub ::std::os::raw::c_void);
#[repr(transparent)]
#[derive(Debug)]
pub struct ss_instance_t(pub ::std::os::raw::c_void);
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_FATAL: ss_plugin_log_severity = 1;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_CRITICAL: ss_plugin_log_severity = 2;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_ERROR: ss_plugin_log_severity = 3;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_WARNING: ss_plugin_log_severity = 4;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_NOTICE: ss_plugin_log_severity = 5;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_INFO: ss_plugin_log_severity = 6;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_DEBUG: ss_plugin_log_severity = 7;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_TRACE: ss_plugin_log_severity = 8;
pub type ss_plugin_log_severity = ::std::os::raw::c_uint;
pub const ss_plugin_metric_value_type_SS_PLUGIN_METRIC_VALUE_TYPE_U32: ss_plugin_metric_value_type =
    0;
pub const ss_plugin_metric_value_type_SS_PLUGIN_METRIC_VALUE_TYPE_S32: ss_plugin_metric_value_type =
    1;
pub const ss_plugin_metric_value_type_SS_PLUGIN_METRIC_VALUE_TYPE_U64: ss_plugin_metric_value_type =
    2;
pub const ss_plugin_metric_value_type_SS_PLUGIN_METRIC_VALUE_TYPE_S64: ss_plugin_metric_value_type =
    3;
pub const ss_plugin_metric_value_type_SS_PLUGIN_METRIC_VALUE_TYPE_D: ss_plugin_metric_value_type =
    4;
pub const ss_plugin_metric_value_type_SS_PLUGIN_METRIC_VALUE_TYPE_F: ss_plugin_metric_value_type =
    5;
pub const ss_plugin_metric_value_type_SS_PLUGIN_METRIC_VALUE_TYPE_I: ss_plugin_metric_value_type =
    6;
pub type ss_plugin_metric_value_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ss_plugin_metric_value {
    pub u32_: u32,
    pub s32: i32,
    pub u64_: u64,
    pub s64: i64,
    pub d: f64,
    pub f: f32,
    pub i: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_metric_value"][::std::mem::size_of::<ss_plugin_metric_value>() - 8usize];
    ["Alignment of ss_plugin_metric_value"]
        [::std::mem::align_of::<ss_plugin_metric_value>() - 8usize];
    ["Offset of field: ss_plugin_metric_value::u32_"]
        [::std::mem::offset_of!(ss_plugin_metric_value, u32_) - 0usize];
    ["Offset of field: ss_plugin_metric_value::s32"]
        [::std::mem::offset_of!(ss_plugin_metric_value, s32) - 0usize];
    ["Offset of field: ss_plugin_metric_value::u64_"]
        [::std::mem::offset_of!(ss_plugin_metric_value, u64_) - 0usize];
    ["Offset of field: ss_plugin_metric_value::s64"]
        [::std::mem::offset_of!(ss_plugin_metric_value, s64) - 0usize];
    ["Offset of field: ss_plugin_metric_value::d"]
        [::std::mem::offset_of!(ss_plugin_metric_value, d) - 0usize];
    ["Offset of field: ss_plugin_metric_value::f"]
        [::std::mem::offset_of!(ss_plugin_metric_value, f) - 0usize];
    ["Offset of field: ss_plugin_metric_value::i"]
        [::std::mem::offset_of!(ss_plugin_metric_value, i) - 0usize];
};
pub const ss_plugin_metric_type_SS_PLUGIN_METRIC_TYPE_MONOTONIC: ss_plugin_metric_type = 0;
pub const ss_plugin_metric_type_SS_PLUGIN_METRIC_TYPE_NON_MONOTONIC: ss_plugin_metric_type = 1;
pub type ss_plugin_metric_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ss_plugin_metric {
    pub name: *const ::std::os::raw::c_char,
    pub type_: ss_plugin_metric_type,
    pub value: ss_plugin_metric_value,
    pub value_type: ss_plugin_metric_value_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_metric"][::std::mem::size_of::<ss_plugin_metric>() - 32usize];
    ["Alignment of ss_plugin_metric"][::std::mem::align_of::<ss_plugin_metric>() - 8usize];
    ["Offset of field: ss_plugin_metric::name"]
        [::std::mem::offset_of!(ss_plugin_metric, name) - 0usize];
    ["Offset of field: ss_plugin_metric::type_"]
        [::std::mem::offset_of!(ss_plugin_metric, type_) - 8usize];
    ["Offset of field: ss_plugin_metric::value"]
        [::std::mem::offset_of!(ss_plugin_metric, value) - 16usize];
    ["Offset of field: ss_plugin_metric::value_type"]
        [::std::mem::offset_of!(ss_plugin_metric, value_type) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_fields_vtable {
    pub list_table_fields: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            nfields: *mut u32,
        ) -> *const ss_plugin_table_fieldinfo,
    >,
    pub get_table_field: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            name: *const ::std::os::raw::c_char,
            data_type: ss_plugin_state_type,
        ) -> *mut ss_plugin_table_field_t,
    >,
    pub add_table_field: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            name: *const ::std::os::raw::c_char,
            data_type: ss_plugin_state_type,
        ) -> *mut ss_plugin_table_field_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_table_fields_vtable"]
        [::std::mem::size_of::<ss_plugin_table_fields_vtable>() - 24usize];
    ["Alignment of ss_plugin_table_fields_vtable"]
        [::std::mem::align_of::<ss_plugin_table_fields_vtable>() - 8usize];
    ["Offset of field: ss_plugin_table_fields_vtable::list_table_fields"]
        [::std::mem::offset_of!(ss_plugin_table_fields_vtable, list_table_fields) - 0usize];
    ["Offset of field: ss_plugin_table_fields_vtable::get_table_field"]
        [::std::mem::offset_of!(ss_plugin_table_fields_vtable, get_table_field) - 8usize];
    ["Offset of field: ss_plugin_table_fields_vtable::add_table_field"]
        [::std::mem::offset_of!(ss_plugin_table_fields_vtable, add_table_field) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_fields_vtable_ext {
    pub list_table_fields: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            nfields: *mut u32,
        ) -> *const ss_plugin_table_fieldinfo,
    >,
    pub get_table_field: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            name: *const ::std::os::raw::c_char,
            data_type: ss_plugin_state_type,
        ) -> *mut ss_plugin_table_field_t,
    >,
    pub add_table_field: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            name: *const ::std::os::raw::c_char,
            data_type: ss_plugin_state_type,
        ) -> *mut ss_plugin_table_field_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_table_fields_vtable_ext"]
        [::std::mem::size_of::<ss_plugin_table_fields_vtable_ext>() - 24usize];
    ["Alignment of ss_plugin_table_fields_vtable_ext"]
        [::std::mem::align_of::<ss_plugin_table_fields_vtable_ext>() - 8usize];
    ["Offset of field: ss_plugin_table_fields_vtable_ext::list_table_fields"]
        [::std::mem::offset_of!(ss_plugin_table_fields_vtable_ext, list_table_fields) - 0usize];
    ["Offset of field: ss_plugin_table_fields_vtable_ext::get_table_field"]
        [::std::mem::offset_of!(ss_plugin_table_fields_vtable_ext, get_table_field) - 8usize];
    ["Offset of field: ss_plugin_table_fields_vtable_ext::add_table_field"]
        [::std::mem::offset_of!(ss_plugin_table_fields_vtable_ext, add_table_field) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_reader_vtable {
    pub get_table_name: ::std::option::Option<
        unsafe extern "C-unwind" fn(t: *mut ss_plugin_table_t) -> *const ::std::os::raw::c_char,
    >,
    pub get_table_size:
        ::std::option::Option<unsafe extern "C-unwind" fn(t: *mut ss_plugin_table_t) -> u64>,
    pub get_table_entry: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
        ) -> *mut ss_plugin_table_entry_t,
    >,
    pub read_entry_field: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            e: *mut ss_plugin_table_entry_t,
            f: *const ss_plugin_table_field_t,
            out: *mut ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_table_reader_vtable"]
        [::std::mem::size_of::<ss_plugin_table_reader_vtable>() - 32usize];
    ["Alignment of ss_plugin_table_reader_vtable"]
        [::std::mem::align_of::<ss_plugin_table_reader_vtable>() - 8usize];
    ["Offset of field: ss_plugin_table_reader_vtable::get_table_name"]
        [::std::mem::offset_of!(ss_plugin_table_reader_vtable, get_table_name) - 0usize];
    ["Offset of field: ss_plugin_table_reader_vtable::get_table_size"]
        [::std::mem::offset_of!(ss_plugin_table_reader_vtable, get_table_size) - 8usize];
    ["Offset of field: ss_plugin_table_reader_vtable::get_table_entry"]
        [::std::mem::offset_of!(ss_plugin_table_reader_vtable, get_table_entry) - 16usize];
    ["Offset of field: ss_plugin_table_reader_vtable::read_entry_field"]
        [::std::mem::offset_of!(ss_plugin_table_reader_vtable, read_entry_field) - 24usize];
};
#[repr(transparent)]
#[derive(Debug)]
pub struct ss_plugin_table_iterator_state_t(pub ::std::os::raw::c_void);
pub type ss_plugin_table_iterator_func_t = ::std::option::Option<
    unsafe extern "C-unwind" fn(
        s: *mut ss_plugin_table_iterator_state_t,
        e: *mut ss_plugin_table_entry_t,
    ) -> ss_plugin_bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_reader_vtable_ext {
    pub get_table_name: ::std::option::Option<
        unsafe extern "C-unwind" fn(t: *mut ss_plugin_table_t) -> *const ::std::os::raw::c_char,
    >,
    pub get_table_size:
        ::std::option::Option<unsafe extern "C-unwind" fn(t: *mut ss_plugin_table_t) -> u64>,
    pub get_table_entry: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
        ) -> *mut ss_plugin_table_entry_t,
    >,
    pub read_entry_field: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            e: *mut ss_plugin_table_entry_t,
            f: *const ss_plugin_table_field_t,
            out: *mut ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
    pub release_table_entry: ::std::option::Option<
        unsafe extern "C-unwind" fn(t: *mut ss_plugin_table_t, e: *mut ss_plugin_table_entry_t),
    >,
    pub iterate_entries: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            it: ss_plugin_table_iterator_func_t,
            s: *mut ss_plugin_table_iterator_state_t,
        ) -> ss_plugin_bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_table_reader_vtable_ext"]
        [::std::mem::size_of::<ss_plugin_table_reader_vtable_ext>() - 48usize];
    ["Alignment of ss_plugin_table_reader_vtable_ext"]
        [::std::mem::align_of::<ss_plugin_table_reader_vtable_ext>() - 8usize];
    ["Offset of field: ss_plugin_table_reader_vtable_ext::get_table_name"]
        [::std::mem::offset_of!(ss_plugin_table_reader_vtable_ext, get_table_name) - 0usize];
    ["Offset of field: ss_plugin_table_reader_vtable_ext::get_table_size"]
        [::std::mem::offset_of!(ss_plugin_table_reader_vtable_ext, get_table_size) - 8usize];
    ["Offset of field: ss_plugin_table_reader_vtable_ext::get_table_entry"]
        [::std::mem::offset_of!(ss_plugin_table_reader_vtable_ext, get_table_entry) - 16usize];
    ["Offset of field: ss_plugin_table_reader_vtable_ext::read_entry_field"]
        [::std::mem::offset_of!(ss_plugin_table_reader_vtable_ext, read_entry_field) - 24usize];
    ["Offset of field: ss_plugin_table_reader_vtable_ext::release_table_entry"]
        [::std::mem::offset_of!(ss_plugin_table_reader_vtable_ext, release_table_entry) - 32usize];
    ["Offset of field: ss_plugin_table_reader_vtable_ext::iterate_entries"]
        [::std::mem::offset_of!(ss_plugin_table_reader_vtable_ext, iterate_entries) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_writer_vtable {
    pub clear_table: ::std::option::Option<
        unsafe extern "C-unwind" fn(t: *mut ss_plugin_table_t) -> ss_plugin_rc,
    >,
    pub erase_table_entry: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
    pub create_table_entry: ::std::option::Option<
        unsafe extern "C-unwind" fn(t: *mut ss_plugin_table_t) -> *mut ss_plugin_table_entry_t,
    >,
    pub destroy_table_entry: ::std::option::Option<
        unsafe extern "C-unwind" fn(t: *mut ss_plugin_table_t, e: *mut ss_plugin_table_entry_t),
    >,
    pub add_table_entry: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
            entry: *mut ss_plugin_table_entry_t,
        ) -> *mut ss_plugin_table_entry_t,
    >,
    pub write_entry_field: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            e: *mut ss_plugin_table_entry_t,
            f: *const ss_plugin_table_field_t,
            in_: *const ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_table_writer_vtable"]
        [::std::mem::size_of::<ss_plugin_table_writer_vtable>() - 48usize];
    ["Alignment of ss_plugin_table_writer_vtable"]
        [::std::mem::align_of::<ss_plugin_table_writer_vtable>() - 8usize];
    ["Offset of field: ss_plugin_table_writer_vtable::clear_table"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable, clear_table) - 0usize];
    ["Offset of field: ss_plugin_table_writer_vtable::erase_table_entry"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable, erase_table_entry) - 8usize];
    ["Offset of field: ss_plugin_table_writer_vtable::create_table_entry"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable, create_table_entry) - 16usize];
    ["Offset of field: ss_plugin_table_writer_vtable::destroy_table_entry"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable, destroy_table_entry) - 24usize];
    ["Offset of field: ss_plugin_table_writer_vtable::add_table_entry"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable, add_table_entry) - 32usize];
    ["Offset of field: ss_plugin_table_writer_vtable::write_entry_field"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable, write_entry_field) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_writer_vtable_ext {
    pub clear_table: ::std::option::Option<
        unsafe extern "C-unwind" fn(t: *mut ss_plugin_table_t) -> ss_plugin_rc,
    >,
    pub erase_table_entry: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
    pub create_table_entry: ::std::option::Option<
        unsafe extern "C-unwind" fn(t: *mut ss_plugin_table_t) -> *mut ss_plugin_table_entry_t,
    >,
    pub destroy_table_entry: ::std::option::Option<
        unsafe extern "C-unwind" fn(t: *mut ss_plugin_table_t, e: *mut ss_plugin_table_entry_t),
    >,
    pub add_table_entry: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
            entry: *mut ss_plugin_table_entry_t,
        ) -> *mut ss_plugin_table_entry_t,
    >,
    pub write_entry_field: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            t: *mut ss_plugin_table_t,
            e: *mut ss_plugin_table_entry_t,
            f: *const ss_plugin_table_field_t,
            in_: *const ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_table_writer_vtable_ext"]
        [::std::mem::size_of::<ss_plugin_table_writer_vtable_ext>() - 48usize];
    ["Alignment of ss_plugin_table_writer_vtable_ext"]
        [::std::mem::align_of::<ss_plugin_table_writer_vtable_ext>() - 8usize];
    ["Offset of field: ss_plugin_table_writer_vtable_ext::clear_table"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable_ext, clear_table) - 0usize];
    ["Offset of field: ss_plugin_table_writer_vtable_ext::erase_table_entry"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable_ext, erase_table_entry) - 8usize];
    ["Offset of field: ss_plugin_table_writer_vtable_ext::create_table_entry"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable_ext, create_table_entry) - 16usize];
    ["Offset of field: ss_plugin_table_writer_vtable_ext::destroy_table_entry"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable_ext, destroy_table_entry) - 24usize];
    ["Offset of field: ss_plugin_table_writer_vtable_ext::add_table_entry"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable_ext, add_table_entry) - 32usize];
    ["Offset of field: ss_plugin_table_writer_vtable_ext::write_entry_field"]
        [::std::mem::offset_of!(ss_plugin_table_writer_vtable_ext, write_entry_field) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_input {
    pub name: *const ::std::os::raw::c_char,
    pub key_type: ss_plugin_state_type,
    pub table: *mut ss_plugin_table_t,
    pub reader: ss_plugin_table_reader_vtable,
    pub writer: ss_plugin_table_writer_vtable,
    pub fields: ss_plugin_table_fields_vtable,
    pub reader_ext: *mut ss_plugin_table_reader_vtable_ext,
    pub writer_ext: *mut ss_plugin_table_writer_vtable_ext,
    pub fields_ext: *mut ss_plugin_table_fields_vtable_ext,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_table_input"][::std::mem::size_of::<ss_plugin_table_input>() - 152usize];
    ["Alignment of ss_plugin_table_input"]
        [::std::mem::align_of::<ss_plugin_table_input>() - 8usize];
    ["Offset of field: ss_plugin_table_input::name"]
        [::std::mem::offset_of!(ss_plugin_table_input, name) - 0usize];
    ["Offset of field: ss_plugin_table_input::key_type"]
        [::std::mem::offset_of!(ss_plugin_table_input, key_type) - 8usize];
    ["Offset of field: ss_plugin_table_input::table"]
        [::std::mem::offset_of!(ss_plugin_table_input, table) - 16usize];
    ["Offset of field: ss_plugin_table_input::reader"]
        [::std::mem::offset_of!(ss_plugin_table_input, reader) - 24usize];
    ["Offset of field: ss_plugin_table_input::writer"]
        [::std::mem::offset_of!(ss_plugin_table_input, writer) - 56usize];
    ["Offset of field: ss_plugin_table_input::fields"]
        [::std::mem::offset_of!(ss_plugin_table_input, fields) - 104usize];
    ["Offset of field: ss_plugin_table_input::reader_ext"]
        [::std::mem::offset_of!(ss_plugin_table_input, reader_ext) - 128usize];
    ["Offset of field: ss_plugin_table_input::writer_ext"]
        [::std::mem::offset_of!(ss_plugin_table_input, writer_ext) - 136usize];
    ["Offset of field: ss_plugin_table_input::fields_ext"]
        [::std::mem::offset_of!(ss_plugin_table_input, fields_ext) - 144usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_init_tables_input {
    pub list_tables: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            o: *mut ss_plugin_owner_t,
            ntables: *mut u32,
        ) -> *mut ss_plugin_table_info,
    >,
    pub get_table: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            o: *mut ss_plugin_owner_t,
            name: *const ::std::os::raw::c_char,
            key_type: ss_plugin_state_type,
        ) -> *mut ss_plugin_table_t,
    >,
    pub add_table: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            o: *mut ss_plugin_owner_t,
            in_: *const ss_plugin_table_input,
        ) -> ss_plugin_rc,
    >,
    pub fields: ss_plugin_table_fields_vtable,
    pub fields_ext: *mut ss_plugin_table_fields_vtable_ext,
    pub reader_ext: *mut ss_plugin_table_reader_vtable_ext,
    pub writer_ext: *mut ss_plugin_table_writer_vtable_ext,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_init_tables_input"]
        [::std::mem::size_of::<ss_plugin_init_tables_input>() - 72usize];
    ["Alignment of ss_plugin_init_tables_input"]
        [::std::mem::align_of::<ss_plugin_init_tables_input>() - 8usize];
    ["Offset of field: ss_plugin_init_tables_input::list_tables"]
        [::std::mem::offset_of!(ss_plugin_init_tables_input, list_tables) - 0usize];
    ["Offset of field: ss_plugin_init_tables_input::get_table"]
        [::std::mem::offset_of!(ss_plugin_init_tables_input, get_table) - 8usize];
    ["Offset of field: ss_plugin_init_tables_input::add_table"]
        [::std::mem::offset_of!(ss_plugin_init_tables_input, add_table) - 16usize];
    ["Offset of field: ss_plugin_init_tables_input::fields"]
        [::std::mem::offset_of!(ss_plugin_init_tables_input, fields) - 24usize];
    ["Offset of field: ss_plugin_init_tables_input::fields_ext"]
        [::std::mem::offset_of!(ss_plugin_init_tables_input, fields_ext) - 48usize];
    ["Offset of field: ss_plugin_init_tables_input::reader_ext"]
        [::std::mem::offset_of!(ss_plugin_init_tables_input, reader_ext) - 56usize];
    ["Offset of field: ss_plugin_init_tables_input::writer_ext"]
        [::std::mem::offset_of!(ss_plugin_init_tables_input, writer_ext) - 64usize];
};
pub type ss_plugin_log_fn_t = ::std::option::Option<
    unsafe extern "C-unwind" fn(
        o: *mut ss_plugin_owner_t,
        component: *const ::std::os::raw::c_char,
        msg: *const ::std::os::raw::c_char,
        sev: ss_plugin_log_severity,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_init_input {
    pub config: *const ::std::os::raw::c_char,
    pub owner: *mut ss_plugin_owner_t,
    pub get_owner_last_error: ::std::option::Option<
        unsafe extern "C-unwind" fn(o: *mut ss_plugin_owner_t) -> *const ::std::os::raw::c_char,
    >,
    pub tables: *const ss_plugin_init_tables_input,
    pub log_fn: ss_plugin_log_fn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_init_input"][::std::mem::size_of::<ss_plugin_init_input>() - 40usize];
    ["Alignment of ss_plugin_init_input"][::std::mem::align_of::<ss_plugin_init_input>() - 8usize];
    ["Offset of field: ss_plugin_init_input::config"]
        [::std::mem::offset_of!(ss_plugin_init_input, config) - 0usize];
    ["Offset of field: ss_plugin_init_input::owner"]
        [::std::mem::offset_of!(ss_plugin_init_input, owner) - 8usize];
    ["Offset of field: ss_plugin_init_input::get_owner_last_error"]
        [::std::mem::offset_of!(ss_plugin_init_input, get_owner_last_error) - 16usize];
    ["Offset of field: ss_plugin_init_input::tables"]
        [::std::mem::offset_of!(ss_plugin_init_input, tables) - 24usize];
    ["Offset of field: ss_plugin_init_input::log_fn"]
        [::std::mem::offset_of!(ss_plugin_init_input, log_fn) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_field_extract_input {
    pub owner: *mut ss_plugin_owner_t,
    pub get_owner_last_error: ::std::option::Option<
        unsafe extern "C-unwind" fn(o: *mut ss_plugin_owner_t) -> *const ::std::os::raw::c_char,
    >,
    pub num_fields: u32,
    pub fields: *mut ss_plugin_extract_field,
    pub table_reader: ss_plugin_table_reader_vtable,
    pub table_reader_ext: *mut ss_plugin_table_reader_vtable_ext,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_field_extract_input"]
        [::std::mem::size_of::<ss_plugin_field_extract_input>() - 72usize];
    ["Alignment of ss_plugin_field_extract_input"]
        [::std::mem::align_of::<ss_plugin_field_extract_input>() - 8usize];
    ["Offset of field: ss_plugin_field_extract_input::owner"]
        [::std::mem::offset_of!(ss_plugin_field_extract_input, owner) - 0usize];
    ["Offset of field: ss_plugin_field_extract_input::get_owner_last_error"]
        [::std::mem::offset_of!(ss_plugin_field_extract_input, get_owner_last_error) - 8usize];
    ["Offset of field: ss_plugin_field_extract_input::num_fields"]
        [::std::mem::offset_of!(ss_plugin_field_extract_input, num_fields) - 16usize];
    ["Offset of field: ss_plugin_field_extract_input::fields"]
        [::std::mem::offset_of!(ss_plugin_field_extract_input, fields) - 24usize];
    ["Offset of field: ss_plugin_field_extract_input::table_reader"]
        [::std::mem::offset_of!(ss_plugin_field_extract_input, table_reader) - 32usize];
    ["Offset of field: ss_plugin_field_extract_input::table_reader_ext"]
        [::std::mem::offset_of!(ss_plugin_field_extract_input, table_reader_ext) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_event_parse_input {
    pub owner: *mut ss_plugin_owner_t,
    pub get_owner_last_error: ::std::option::Option<
        unsafe extern "C-unwind" fn(o: *mut ss_plugin_owner_t) -> *const ::std::os::raw::c_char,
    >,
    pub table_reader: ss_plugin_table_reader_vtable,
    pub table_writer: ss_plugin_table_writer_vtable,
    pub table_reader_ext: *mut ss_plugin_table_reader_vtable_ext,
    pub table_writer_ext: *mut ss_plugin_table_writer_vtable_ext,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_event_parse_input"]
        [::std::mem::size_of::<ss_plugin_event_parse_input>() - 112usize];
    ["Alignment of ss_plugin_event_parse_input"]
        [::std::mem::align_of::<ss_plugin_event_parse_input>() - 8usize];
    ["Offset of field: ss_plugin_event_parse_input::owner"]
        [::std::mem::offset_of!(ss_plugin_event_parse_input, owner) - 0usize];
    ["Offset of field: ss_plugin_event_parse_input::get_owner_last_error"]
        [::std::mem::offset_of!(ss_plugin_event_parse_input, get_owner_last_error) - 8usize];
    ["Offset of field: ss_plugin_event_parse_input::table_reader"]
        [::std::mem::offset_of!(ss_plugin_event_parse_input, table_reader) - 16usize];
    ["Offset of field: ss_plugin_event_parse_input::table_writer"]
        [::std::mem::offset_of!(ss_plugin_event_parse_input, table_writer) - 48usize];
    ["Offset of field: ss_plugin_event_parse_input::table_reader_ext"]
        [::std::mem::offset_of!(ss_plugin_event_parse_input, table_reader_ext) - 96usize];
    ["Offset of field: ss_plugin_event_parse_input::table_writer_ext"]
        [::std::mem::offset_of!(ss_plugin_event_parse_input, table_writer_ext) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_set_config_input {
    pub config: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_set_config_input"]
        [::std::mem::size_of::<ss_plugin_set_config_input>() - 8usize];
    ["Alignment of ss_plugin_set_config_input"]
        [::std::mem::align_of::<ss_plugin_set_config_input>() - 8usize];
    ["Offset of field: ss_plugin_set_config_input::config"]
        [::std::mem::offset_of!(ss_plugin_set_config_input, config) - 0usize];
};
#[repr(transparent)]
#[derive(Debug)]
pub struct ss_plugin_routine_t(pub ::std::os::raw::c_void);
#[repr(transparent)]
#[derive(Debug)]
pub struct ss_plugin_routine_state_t(pub ::std::os::raw::c_void);
pub type ss_plugin_routine_fn_t = ::std::option::Option<
    unsafe extern "C-unwind" fn(
        s: *mut ss_plugin_t,
        i: *mut ss_plugin_routine_state_t,
    ) -> ss_plugin_bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_routine_vtable {
    pub subscribe: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            o: *mut ss_plugin_owner_t,
            f: ss_plugin_routine_fn_t,
            i: *mut ss_plugin_routine_state_t,
        ) -> *mut ss_plugin_routine_t,
    >,
    pub unsubscribe: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            o: *mut ss_plugin_owner_t,
            r: *mut ss_plugin_routine_t,
        ) -> ss_plugin_rc,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_routine_vtable"]
        [::std::mem::size_of::<ss_plugin_routine_vtable>() - 16usize];
    ["Alignment of ss_plugin_routine_vtable"]
        [::std::mem::align_of::<ss_plugin_routine_vtable>() - 8usize];
    ["Offset of field: ss_plugin_routine_vtable::subscribe"]
        [::std::mem::offset_of!(ss_plugin_routine_vtable, subscribe) - 0usize];
    ["Offset of field: ss_plugin_routine_vtable::unsubscribe"]
        [::std::mem::offset_of!(ss_plugin_routine_vtable, unsubscribe) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_capture_listen_input {
    pub owner: *mut ss_plugin_owner_t,
    pub routine: *mut ss_plugin_routine_vtable,
    pub table_reader_ext: *mut ss_plugin_table_reader_vtable_ext,
    pub table_writer_ext: *mut ss_plugin_table_writer_vtable_ext,
    pub get_owner_last_error: ::std::option::Option<
        unsafe extern "C-unwind" fn(o: *mut ss_plugin_owner_t) -> *const ::std::os::raw::c_char,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ss_plugin_capture_listen_input"]
        [::std::mem::size_of::<ss_plugin_capture_listen_input>() - 40usize];
    ["Alignment of ss_plugin_capture_listen_input"]
        [::std::mem::align_of::<ss_plugin_capture_listen_input>() - 8usize];
    ["Offset of field: ss_plugin_capture_listen_input::owner"]
        [::std::mem::offset_of!(ss_plugin_capture_listen_input, owner) - 0usize];
    ["Offset of field: ss_plugin_capture_listen_input::routine"]
        [::std::mem::offset_of!(ss_plugin_capture_listen_input, routine) - 8usize];
    ["Offset of field: ss_plugin_capture_listen_input::table_reader_ext"]
        [::std::mem::offset_of!(ss_plugin_capture_listen_input, table_reader_ext) - 16usize];
    ["Offset of field: ss_plugin_capture_listen_input::table_writer_ext"]
        [::std::mem::offset_of!(ss_plugin_capture_listen_input, table_writer_ext) - 24usize];
    ["Offset of field: ss_plugin_capture_listen_input::get_owner_last_error"]
        [::std::mem::offset_of!(ss_plugin_capture_listen_input, get_owner_last_error) - 32usize];
};
pub type ss_plugin_async_event_handler_t = ::std::option::Option<
    unsafe extern "C-unwind" fn(
        o: *mut ss_plugin_owner_t,
        evt: *const ss_plugin_event,
        err: *mut ::std::os::raw::c_char,
    ) -> ss_plugin_rc,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plugin_api {
    pub get_required_api_version:
        ::std::option::Option<unsafe extern "C-unwind" fn() -> *const ::std::os::raw::c_char>,
    pub get_init_schema: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            schema_type: *mut ss_plugin_schema_type,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub init: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            input: *const ss_plugin_init_input,
            rc: *mut ss_plugin_rc,
        ) -> *mut ss_plugin_t,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C-unwind" fn(s: *mut ss_plugin_t)>,
    pub get_last_error: ::std::option::Option<
        unsafe extern "C-unwind" fn(s: *mut ss_plugin_t) -> *const ::std::os::raw::c_char,
    >,
    pub get_name:
        ::std::option::Option<unsafe extern "C-unwind" fn() -> *const ::std::os::raw::c_char>,
    pub get_description:
        ::std::option::Option<unsafe extern "C-unwind" fn() -> *const ::std::os::raw::c_char>,
    pub get_contact:
        ::std::option::Option<unsafe extern "C-unwind" fn() -> *const ::std::os::raw::c_char>,
    pub get_version:
        ::std::option::Option<unsafe extern "C-unwind" fn() -> *const ::std::os::raw::c_char>,
    pub __bindgen_anon_1: plugin_api__bindgen_ty_1,
    pub __bindgen_anon_2: plugin_api__bindgen_ty_2,
    pub __bindgen_anon_3: plugin_api__bindgen_ty_3,
    pub __bindgen_anon_4: plugin_api__bindgen_ty_4,
    pub set_config: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            i: *const ss_plugin_set_config_input,
        ) -> ss_plugin_rc,
    >,
    pub get_metrics: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            num_metrics: *mut u32,
        ) -> *mut ss_plugin_metric,
    >,
    pub __bindgen_anon_5: plugin_api__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plugin_api__bindgen_ty_1 {
    pub get_id: ::std::option::Option<unsafe extern "C-unwind" fn() -> u32>,
    pub get_event_source:
        ::std::option::Option<unsafe extern "C-unwind" fn() -> *const ::std::os::raw::c_char>,
    pub open: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            params: *const ::std::os::raw::c_char,
            rc: *mut ss_plugin_rc,
        ) -> *mut ss_instance_t,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C-unwind" fn(s: *mut ss_plugin_t, h: *mut ss_instance_t),
    >,
    pub list_open_params: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            rc: *mut ss_plugin_rc,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub get_progress: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            h: *mut ss_instance_t,
            progress_pct: *mut u32,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub event_to_string: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            evt: *const ss_plugin_event_input,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub next_batch: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            h: *mut ss_instance_t,
            nevts: *mut u32,
            evts: *mut *mut *mut ss_plugin_event,
        ) -> ss_plugin_rc,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of plugin_api__bindgen_ty_1"]
        [::std::mem::size_of::<plugin_api__bindgen_ty_1>() - 64usize];
    ["Alignment of plugin_api__bindgen_ty_1"]
        [::std::mem::align_of::<plugin_api__bindgen_ty_1>() - 8usize];
    ["Offset of field: plugin_api__bindgen_ty_1::get_id"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_1, get_id) - 0usize];
    ["Offset of field: plugin_api__bindgen_ty_1::get_event_source"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_1, get_event_source) - 8usize];
    ["Offset of field: plugin_api__bindgen_ty_1::open"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_1, open) - 16usize];
    ["Offset of field: plugin_api__bindgen_ty_1::close"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_1, close) - 24usize];
    ["Offset of field: plugin_api__bindgen_ty_1::list_open_params"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_1, list_open_params) - 32usize];
    ["Offset of field: plugin_api__bindgen_ty_1::get_progress"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_1, get_progress) - 40usize];
    ["Offset of field: plugin_api__bindgen_ty_1::event_to_string"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_1, event_to_string) - 48usize];
    ["Offset of field: plugin_api__bindgen_ty_1::next_batch"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_1, next_batch) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plugin_api__bindgen_ty_2 {
    pub get_extract_event_types: ::std::option::Option<
        unsafe extern "C-unwind" fn(numtypes: *mut u32, s: *mut ss_plugin_t) -> *mut u16,
    >,
    pub get_extract_event_sources:
        ::std::option::Option<unsafe extern "C-unwind" fn() -> *const ::std::os::raw::c_char>,
    pub get_fields:
        ::std::option::Option<unsafe extern "C-unwind" fn() -> *const ::std::os::raw::c_char>,
    pub extract_fields: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            evt: *const ss_plugin_event_input,
            in_: *const ss_plugin_field_extract_input,
        ) -> ss_plugin_rc,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of plugin_api__bindgen_ty_2"]
        [::std::mem::size_of::<plugin_api__bindgen_ty_2>() - 32usize];
    ["Alignment of plugin_api__bindgen_ty_2"]
        [::std::mem::align_of::<plugin_api__bindgen_ty_2>() - 8usize];
    ["Offset of field: plugin_api__bindgen_ty_2::get_extract_event_types"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_2, get_extract_event_types) - 0usize];
    ["Offset of field: plugin_api__bindgen_ty_2::get_extract_event_sources"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_2, get_extract_event_sources) - 8usize];
    ["Offset of field: plugin_api__bindgen_ty_2::get_fields"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_2, get_fields) - 16usize];
    ["Offset of field: plugin_api__bindgen_ty_2::extract_fields"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_2, extract_fields) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plugin_api__bindgen_ty_3 {
    pub get_parse_event_types: ::std::option::Option<
        unsafe extern "C-unwind" fn(numtypes: *mut u32, s: *mut ss_plugin_t) -> *mut u16,
    >,
    pub get_parse_event_sources:
        ::std::option::Option<unsafe extern "C-unwind" fn() -> *const ::std::os::raw::c_char>,
    pub parse_event: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            evt: *const ss_plugin_event_input,
            in_: *const ss_plugin_event_parse_input,
        ) -> ss_plugin_rc,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of plugin_api__bindgen_ty_3"]
        [::std::mem::size_of::<plugin_api__bindgen_ty_3>() - 24usize];
    ["Alignment of plugin_api__bindgen_ty_3"]
        [::std::mem::align_of::<plugin_api__bindgen_ty_3>() - 8usize];
    ["Offset of field: plugin_api__bindgen_ty_3::get_parse_event_types"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_3, get_parse_event_types) - 0usize];
    ["Offset of field: plugin_api__bindgen_ty_3::get_parse_event_sources"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_3, get_parse_event_sources) - 8usize];
    ["Offset of field: plugin_api__bindgen_ty_3::parse_event"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_3, parse_event) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plugin_api__bindgen_ty_4 {
    pub get_async_event_sources:
        ::std::option::Option<unsafe extern "C-unwind" fn() -> *const ::std::os::raw::c_char>,
    pub get_async_events:
        ::std::option::Option<unsafe extern "C-unwind" fn() -> *const ::std::os::raw::c_char>,
    pub set_async_event_handler: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            owner: *mut ss_plugin_owner_t,
            handler: ss_plugin_async_event_handler_t,
        ) -> ss_plugin_rc,
    >,
    pub dump_state: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            owner: *mut ss_plugin_owner_t,
            handler: ss_plugin_async_event_handler_t,
        ) -> ss_plugin_rc,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of plugin_api__bindgen_ty_4"]
        [::std::mem::size_of::<plugin_api__bindgen_ty_4>() - 32usize];
    ["Alignment of plugin_api__bindgen_ty_4"]
        [::std::mem::align_of::<plugin_api__bindgen_ty_4>() - 8usize];
    ["Offset of field: plugin_api__bindgen_ty_4::get_async_event_sources"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_4, get_async_event_sources) - 0usize];
    ["Offset of field: plugin_api__bindgen_ty_4::get_async_events"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_4, get_async_events) - 8usize];
    ["Offset of field: plugin_api__bindgen_ty_4::set_async_event_handler"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_4, set_async_event_handler) - 16usize];
    ["Offset of field: plugin_api__bindgen_ty_4::dump_state"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_4, dump_state) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plugin_api__bindgen_ty_5 {
    pub capture_open: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            i: *const ss_plugin_capture_listen_input,
        ) -> ss_plugin_rc,
    >,
    pub capture_close: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            s: *mut ss_plugin_t,
            i: *const ss_plugin_capture_listen_input,
        ) -> ss_plugin_rc,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of plugin_api__bindgen_ty_5"]
        [::std::mem::size_of::<plugin_api__bindgen_ty_5>() - 16usize];
    ["Alignment of plugin_api__bindgen_ty_5"]
        [::std::mem::align_of::<plugin_api__bindgen_ty_5>() - 8usize];
    ["Offset of field: plugin_api__bindgen_ty_5::capture_open"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_5, capture_open) - 0usize];
    ["Offset of field: plugin_api__bindgen_ty_5::capture_close"]
        [::std::mem::offset_of!(plugin_api__bindgen_ty_5, capture_close) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of plugin_api"][::std::mem::size_of::<plugin_api>() - 256usize];
    ["Alignment of plugin_api"][::std::mem::align_of::<plugin_api>() - 8usize];
    ["Offset of field: plugin_api::get_required_api_version"]
        [::std::mem::offset_of!(plugin_api, get_required_api_version) - 0usize];
    ["Offset of field: plugin_api::get_init_schema"]
        [::std::mem::offset_of!(plugin_api, get_init_schema) - 8usize];
    ["Offset of field: plugin_api::init"][::std::mem::offset_of!(plugin_api, init) - 16usize];
    ["Offset of field: plugin_api::destroy"][::std::mem::offset_of!(plugin_api, destroy) - 24usize];
    ["Offset of field: plugin_api::get_last_error"]
        [::std::mem::offset_of!(plugin_api, get_last_error) - 32usize];
    ["Offset of field: plugin_api::get_name"]
        [::std::mem::offset_of!(plugin_api, get_name) - 40usize];
    ["Offset of field: plugin_api::get_description"]
        [::std::mem::offset_of!(plugin_api, get_description) - 48usize];
    ["Offset of field: plugin_api::get_contact"]
        [::std::mem::offset_of!(plugin_api, get_contact) - 56usize];
    ["Offset of field: plugin_api::get_version"]
        [::std::mem::offset_of!(plugin_api, get_version) - 64usize];
    ["Offset of field: plugin_api::set_config"]
        [::std::mem::offset_of!(plugin_api, set_config) - 224usize];
    ["Offset of field: plugin_api::get_metrics"]
        [::std::mem::offset_of!(plugin_api, get_metrics) - 232usize];
};
